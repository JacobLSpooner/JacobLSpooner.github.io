[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Jacob Spooner is an undergraduate student at the University of Nebraska-Lincoln who is pursuing a degree in mathematics with a statistics minor. In particular he is interested in statistical and data science related fields that contain real world applications. He is passionate about football (soccer), and enjoys watching collegiate athletics. In the past he has performed volunteer work for the University of Nebraska-Lincoln Athletic Department as a data collector for Nebraska Softball."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "wolves\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2022\n\n\nJacob Spooner\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmadrid\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 6, 2022\n\n\nJacob Spooner\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmachine learning\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2022\n\n\nJacob Spooner\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "JacobLSpooner.github.io/index.html",
    "href": "JacobLSpooner.github.io/index.html",
    "title": "Defying Expectations: Madrid’s Miraculous Road to UCL Glory",
    "section": "",
    "text": "Real Madrid’s Champions League triumph last season was a memorable one to say the least. Emerging victorious against the likes of PSG, Chelsea, Manchester City, and Liverpool, labeling these champions as a fluke seems rather harsh. However, the way in which those matches played out has left many skeptical. Did the stars just happen to align in Real Madrid’s road to glory? An observation of overall chances, as well as data related to expected goals, help provide further insight into the baffling nature of Madrid’s ability to get the job done on the biggest stage of them all."
  },
  {
    "objectID": "posts/ncaa_bracket_model/index.html",
    "href": "posts/ncaa_bracket_model/index.html",
    "title": "Machine Learning Madness: A Woeful Attempt at Predicting this Year’s NCAA Tourney",
    "section": "",
    "text": "Unfortunately, the answer ended up as a resounding no. Competing against my classmates and professor, my bracket ultimately ranked 14th out of the 17 submitted. So what went wrong? Was it my novice status when it comes to machine learning? Or perhaps the unprecedented unpredictable nature of this year’s tourney is to blame for such a disasterclass. Regardless of the reasons, there actually was a method to my madness.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\nCode\nlibrary(tidymodels)\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.3     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.1.0     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.4     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\n\nCode\nlibrary(hoopR)\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nlibrary(gt)\nlibrary(ggrepel)\n\nset.seed(1234)\n\nteamgames <- load_mbb_team_box(seasons = 2015:2023) %>%\n  filter(game_date < as.Date(\"2023-03-14\"))\n\nteamgames <- load_mbb_team_box(seasons = 2015:2023) %>%\n  filter(game_date < as.Date(\"2023-03-14\"))\n\nteamstats <- teamgames %>% \n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score/possessions,\n    eFGpercentage = (field_goals_made + 0.5 * three_point_field_goals_made) / (field_goals_attempted),\n    weighted_orb = (offensive_rebounds * 0.01),\n    weighted_tov = (total_turnovers * 0.01),\n    weighted_fta = (free_throws_attempted * 0.03),\n    predictivefactors = (0.3 * ppp) + (50 * eFGpercentage) + weighted_orb - weighted_tov + weighted_fta \n  )\n\nrollingteamstats <- teamstats %>% \n  group_by(team_short_display_name, season) %>%\n  arrange(game_date) %>%\n  mutate(\n    team_rolling_score = rollmean(lag(team_score, n=1), k=3, align=\"right\", fill=NA),\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    team_rolling_possessions = rollmean(lag(possessions, n=1), k=3, align=\"right\", fill=NA),\n    ppp = team_score/possessions,\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=10, align=\"right\", fill=NA),\n    eFGpercentage = (field_goals_made + 0.5 * three_point_field_goals_made) / (field_goals_attempted),\n    team_rolling_eFGpercentage = rollmean(lag(eFGpercentage, n=1), k=7, align=\"right\", fill=NA),\n    weighted_orb = (offensive_rebounds * 0.01),\n    team_rolling_weighted_orb = rollmean(lag(weighted_orb, n=1), k=7, align=\"right\", fill=NA),\n    weighted_tov = (total_turnovers * 0.01),\n    team_rolling_weighted_tov = rollmean(lag(weighted_tov, n=1), k=7, align=\"right\", fill=NA),\n    weighted_fta = (free_throws_attempted * 0.03),\n    team_rolling_weighted_fta = rollmean(lag(weighted_fta, n=1), k=7, align=\"right\", fill=NA),\n    predictivefactors = (0.3 * ppp) + (50 * eFGpercentage) + weighted_orb - weighted_tov + weighted_fta,\n    team_rolling_predictivefactors = rollmean(lag(predictivefactors, n=1), k=7, align=\"right\", fill=NA)\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score,\n    team_rolling_score,\n    possessions,\n    team_rolling_possessions,\n    ppp,\n    team_rolling_ppp,\n    eFGpercentage,\n    team_rolling_eFGpercentage,\n    weighted_orb,\n    team_rolling_weighted_orb,\n    weighted_tov,\n    team_rolling_weighted_tov,\n    weighted_fta,\n    team_rolling_weighted_fta,\n    predictivefactors,\n    team_rolling_predictivefactors\n    )\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_score = team_rolling_score,\n    opponent_possessions = possessions,\n    opponent_rolling_possessions = team_rolling_possessions,\n    opponent_ppp = ppp,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_eFGpercentage = eFGpercentage,\n    opponent_rolling_eFGpercentage = team_rolling_eFGpercentage,\n    opponent_weighted_orb = weighted_orb,\n    opponent_rolling_weighted_orb = team_rolling_weighted_orb,\n    opponent_weighted_tov = weighted_tov,\n    opponent_rolling_weighted_tov = team_rolling_weighted_tov,\n    opponent_weighted_fta = weighted_fta,\n    opponent_rolling_fta = team_rolling_weighted_fta,\n    opponent_predictivefactors = predictivefactors,\n    opponent_rolling_predictivefactors = team_rolling_predictivefactors\n  ) %>%\n  mutate(opponent_team_id = as.numeric(opponent_team_id)\n)\n\ngames <- team_side %>% inner_join(opponent_side)\n\n\nJoining with `by = join_by(game_id, opponent_team_id, game_date, season)`\n\n\nCode\ngames <- games %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) %>% na.omit()\n\nmodelgames <- games %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_predictivefactors, \n    opponent_rolling_predictivefactors, \n    team_result\n    ) %>%\n  na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\nlog_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\") %>%\n  set_mode(\"classification\")\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %>%\n  step_normalize(all_predictors())\n\nlog_workflow <- \n  workflow() %>% \n  add_model(log_mod) %>% \n  add_recipe(game_recipe)\n\nlog_fit <- \n  log_workflow %>% \n  fit(data = game_train)\n\nsouthround1games <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n)\n\nsouthround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround1games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nsouthround1 <- log_fit %>% predict(new_data = southround1games) %>%\n  bind_cols(southround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround1 <- log_fit %>% predict(new_data = southround1games, type=\"prob\") %>%\n  bind_cols(southround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2games <- tibble(\n  team_short_display_name=\"Texas A&M-CC\",\n  opponent_short_display_name=\"Maryland\"\n) %>% add_row(\n  team_short_display_name=\"Charleston\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n)\n\nsouthround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround2games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nsouthround2 <- log_fit %>% predict(new_data = southround2games) %>%\n  bind_cols(southround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround2 <- log_fit %>% predict(new_data = southround2games, type=\"prob\") %>%\n  bind_cols(southround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3games <- tibble(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"UCSB\",\n  opponent_short_display_name=\"Arizona\"\n) \n\nsouthround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround3games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nsouthround3 <- log_fit %>% predict(new_data = southround3games) %>%\n  bind_cols(southround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3 <- log_fit %>% predict(new_data = southround3games, type=\"prob\") %>%\n  bind_cols(southround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround3\n\n\n# A tibble: 2 × 10\n  .pred_class .pred_W .pred_L team_s…¹ oppon…² oppon…³ game_id game_date  season\n  <fct>         <dbl>   <dbl> <chr>    <chr>     <dbl>   <int> <date>      <int>\n1 L             0.399   0.601 UCSB     Arizona    31.7  4.02e8 2023-03-11   2023\n2 L             0.496   0.504 Maryland Furman     28.6  4.02e8 2023-03-10   2023\n# … with 1 more variable: team_rolling_predictivefactors <dbl>, and abbreviated\n#   variable names ¹​team_short_display_name, ²​opponent_short_display_name,\n#   ³​opponent_rolling_predictivefactors\n\n\nCode\nsouthround4games <- tibble(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Arizona\"\n)\n\nsouthround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(southround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nsouthround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(southround4games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nsouthround4 <- log_fit %>% predict(new_data = southround4games) %>%\n  bind_cols(southround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nsouthround4 <- log_fit %>% predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(southround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround1games <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Fair Dickinson\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n)\n  \neastround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround1games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\neastround1 <- log_fit %>% predict(new_data = eastround1games) %>%\n  bind_cols(eastround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround1 <- log_fit %>% predict(new_data = eastround1games, type=\"prob\") %>%\n  bind_cols(eastround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround2games <- tibble(\n  team_short_display_name=\"Fair Dickinson\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Kansas St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround2games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\neastround2 <- log_fit %>% predict(new_data = eastround2games) %>%\n  bind_cols(eastround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround2 <- log_fit %>% predict(new_data = eastround2games, type=\"prob\") %>%\n  bind_cols(eastround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround3games <- tibble(\n  team_short_display_name=\"FAU\",\n  opponent_short_display_name=\"Duke\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Vermont\"\n) \n\neastround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround3games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\neastround3 <- log_fit %>% predict(new_data = eastround3games) %>%\n  bind_cols(eastround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround3 <- log_fit %>% predict(new_data = eastround3games, type=\"prob\") %>%\n  bind_cols(eastround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\neastround4games <- tibble(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Vermont\"\n)\n\neastround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(eastround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\neastround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(eastround4games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\neastround4 <- log_fit %>% predict(new_data = eastround4games) %>%\n  bind_cols(eastround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\neastround4 <- log_fit %>% predict(new_data = southround4games, type=\"prob\") %>%\n  bind_cols(eastround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1games <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround1games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nmidwestround1 <- log_fit %>% predict(new_data = midwestround1games) %>%\n  bind_cols(midwestround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround1 <- log_fit %>% predict(new_data = midwestround1games, type=\"prob\") %>%\n  bind_cols(midwestround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2games <- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Penn State\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround2games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nmidwestround2 <- log_fit %>% predict(new_data = midwestround2games) %>%\n  bind_cols(midwestround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround2 <- log_fit %>% predict(new_data = midwestround2games, type=\"prob\") %>%\n  bind_cols(midwestround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3games <- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Miami\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Colgate\"\n) \n\nmidwestround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround3games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nmidwestround3 <- log_fit %>% predict(new_data = midwestround3games) %>%\n  bind_cols(midwestround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround3 <- log_fit %>% predict(new_data = midwestround3games, type=\"prob\") %>%\n  bind_cols(midwestround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4games <- tibble(\n  team_short_display_name=\"N Kentucky\",\n  opponent_short_display_name=\"Colgate\"\n)\n\nmidwestround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(midwestround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nmidwestround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(midwestround4games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nmidwestround4 <- log_fit %>% predict(new_data = midwestround4games) %>%\n  bind_cols(midwestround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nmidwestround4 <- log_fit %>% predict(new_data = midwestround4games, type=\"prob\") %>%\n  bind_cols(midwestround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1games <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona St\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround1games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround1games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround1games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround1games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nwestround1 <- log_fit %>% predict(new_data = westround1games) %>%\n  bind_cols(westround1games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround1 <- log_fit %>% predict(new_data = westround1games, type=\"prob\") %>%\n  bind_cols(westround1) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2games <- tibble(\n  team_short_display_name=\"Howard\",\n  opponent_short_display_name=\"Arkansas\"\n) %>% add_row(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UNC Asheville\"\n)\n\nwestround2games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround2games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround2games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround2games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nwestround2 <- log_fit %>% predict(new_data = westround2games) %>%\n  bind_cols(westround2games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround2 <- log_fit %>% predict(new_data = westround2games, type=\"prob\") %>%\n  bind_cols(westround2) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3games <- tibble(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n\nwestround3games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround3games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround3games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround3games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nwestround3 <- log_fit %>% predict(new_data = westround3games) %>%\n  bind_cols(westround3games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround3 <- log_fit %>% predict(new_data = westround3games, type=\"prob\") %>%\n  bind_cols(westround3) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4games <- tibble(\n  team_short_display_name=\"VCU\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n\nwestround4games <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(westround4games)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nwestround4games <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(westround4games) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nwestround4 <- log_fit %>% predict(new_data = westround4games) %>%\n  bind_cols(westround4games) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nwestround4 <- log_fit %>% predict(new_data = westround4games, type=\"prob\") %>%\n  bind_cols(westround4) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfourgames <- tibble(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Vermont\"\n) %>% add_row(\n  team_short_display_name=\"Colgate\",\n  opponent_short_display_name=\"Gonzaga\"  \n)\n\nfinalfourgames <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(finalfourgames)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nfinalfourgames <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(finalfourgames) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nfinalfour <- log_fit %>% predict(new_data = finalfourgames) %>%\n  bind_cols(finalfourgames) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nfinalfour <- log_fit %>% predict(new_data = finalfourgames, type=\"prob\") %>%\n  bind_cols(finalfour) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nchampionshipgame <- tibble(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n\nchampionshipgame <- modelgames %>% group_by(team_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% select(-team_result, -starts_with(\"opponent\")) %>% right_join(championshipgame)\n\n\nJoining with `by = join_by(team_short_display_name)`\n\n\nCode\nchampionshipgame <- modelgames %>% group_by(opponent_short_display_name) %>% filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% ungroup() %>% select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% right_join(championshipgame) \n\n\nJoining with `by = join_by(opponent_short_display_name)`\n\n\nCode\nchampionship <- log_fit %>% predict(new_data = championshipgame) %>%\n  bind_cols(championshipgame) %>% select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nchampionship <- log_fit %>% predict(new_data = championshipgame, type=\"prob\") %>%\n  bind_cols(championship) %>% select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nThe most highly emphasized metric was effective field goal percentage. I placed importance on this metric because it accounts for the fact that three point field goals are more valuable than two point field foals. If a team is scoring high in this metric it means that they are shooting well, and if you are making shots then you are winning games (there is a reason why it is considered the most important of Dean Oliver’s Four Factors).\nIn addition, (although to a much lesser extent) I included points per possession, offensive rebounds, turnovers, and free throw attempts. Points per possession is important because it suggests whether or not a team is putting its possessions to good use. As for offensive rebounds and turnovers, the way I weighted these metrics sort of had them cancel out one another. This makes sense because offensive rebounds provide another crack at scoring whereas turning over the ball prevents a team from even having a chance to score. Regarding free throw attempts, I made this part of the model because a team that is consistently going to the line is providing themselves with the opportunity to points on the board.\nPutting all the aforementioned factors together on a rolling basis of the last seven games, I created a variable that I referred to as formula scores for both teams and their opponents. Below is a chart that demonstrates these scores for all games dating back to 2015.\n\n\nCode\nwin <- modelgames %>% filter(team_result == \"W\")\nloss <- modelgames %>% filter(team_result == \"L\")\n\naverages <- modelgames %>% ungroup() %>% summarise(Avg_team_rolling_predictive_factors = mean(team_rolling_predictivefactors), \n                                                   Avg_opponent_rolling_predictive_factors = mean(opponent_rolling_predictivefactors))\nggplot() + \n  geom_point(data=modelgames, aes(x=`team_rolling_predictivefactors`, y=`opponent_rolling_predictivefactors`), color=\"grey\") +\n  geom_point(data=win, aes(x=`team_rolling_predictivefactors`, y=`opponent_rolling_predictivefactors`), color=\"green\") +\n   geom_point(data=loss, aes(x=`team_rolling_predictivefactors`, y=`opponent_rolling_predictivefactors`), color=\"red\") +\n  geom_smooth(data=modelgames, aes(x=`team_rolling_predictivefactors`, y=`opponent_rolling_predictivefactors`), method=lm, se=FALSE) +\n  geom_hline(yintercept=26.27, color=\"dark grey\") + \n  geom_vline(xintercept=26.27, color=\"dark grey\") +\n  labs(\n    x=\"Team Formula Score (Green = Win, Red = Loss)\",\n    y=\"Opponent Formula Score\", \n    title=\"Higher Team Scores Have Generally Indicated Wins\", \n    subtitle=\"Although there is variability, discrepnacy in these factors normally impacts results.\",\n    caption=\"Source: NCAA | By Jacob Spooner\"\n    ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nAlthough the correlation demonstrated between wins/losses and team/opponent score is far from perfect, there is enough there to suggest that these formula scores are fairly predictive in regards to which team will come out on top. Hence, my decision to emphasize factors such as effective field goal percentage were logical in the given context of game outcomes.\nWhile my madness did indeed have a method to it, a brave soul would be required to predict a certain result shown in the table below containing round 1’s games from the midwest region.\n\n\nCode\nmidwestround1 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"Midwest Regional: First Round\",\n    subtitle = \"My model was extremely confident in Colgate. Alas they got trounced.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"by: Jacob Spooner\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) \n\n\n\n\n\n\n  \n    \n      Midwest Regional: First Round\n    \n    \n      My model was extremely confident in Colgate. Alas they got trounced.\n    \n  \n  \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    Iowa\nW\n0.5380343\nAuburn\n    Texas\nL\n0.2711109\nColgate\n    Miami\nW\n0.5157184\nDrake\n    Xavier\nW\n0.5178294\nKennesaw St\n    Indiana\nL\n0.4475793\nKent State\n    Houston\nL\n0.3451261\nN Kentucky\n    Texas A&M\nL\n0.3841507\nPenn State\n    Iowa State\nL\n0.3577992\nPitt\n  \n  \n    \n      by: Jacob Spooner\n    \n  \n  \n\n\n\n\nYes, that’s right. The model had Colgate as huge favorites over Texas. Sure there were some crazy upsets in this edition of March Madness, but seriously? On what planet is a 15 seed favored by a margin that wide?\nThat being said, there were some solid predictions in that table such as the wins for Pitt and Penn State as well as the the narrow victories for Miami and Xavier. And then you have Northern Kentucky coming out on top against Houston. So yeah. For all the good in there, some of these predictions are truly horrific.\nIt is also worth mentioning that these Colgate and Northern Kentucky victories were not the only crazy upset predictions the model generated. In all honesty, it was scary how much it liked the 15 and 16 seeds and had many of them going on deep runs (although it had both Princeton and FDU losing in the first round of course). Given this issue, provided with greater amounts of time and expertise, I would have factored in the strength of schedules of these teams since I believe that failing to do so resulted in a ridiculous amount of upsets (dominating Mickey Mouse teams is not the quite the same as consistently performing well against ones featuring NBA talent galore).\nSo there you have it. Far from a roaring success but fun nonetheless. As embarrassing as it is, I have left images of my bracket below. Make of it what you will at your own risk."
  },
  {
    "objectID": "posts/real-madrid-run-to-ucl-glory/index.html",
    "href": "posts/real-madrid-run-to-ucl-glory/index.html",
    "title": "Defying Expectations: Madrid’s Miraculous Road to UCL Glory",
    "section": "",
    "text": "However, the way in which those matches played out has left many skeptical. Did the stars just happen to align in Real Madrid’s road to glory? With the expected goals data provided by FBref, we will attempt to gain further insight into the baffling nature of Madrid’s ability to get the job done on the biggest stage of them all.\nCurrently in the football (soccer) analytics world, expected goals is a hot topic that is becoming more and more familiar to your everyday fan. The expected goal value for each shot depends on a mathematical model taking takes multiple events when the shot is taken (such as shot position and attack type).\nThus, the expected goals generated by a team in a given match are calculated by summing up the expected goal value of each shot that team attempts throughout the match. It is worth noting that since expected goals are a subjective metric, the data pertaining to them on FBref might differ from data elsewhere.\nNow regarding Real Madrid and expected goals last season, before diving straight into those knockout stage Champions League ties against other European juggernauts, we ought to take a look at how the club performed in La Liga (which it won by a landslide by the way).\nParticularly of interest is the outcome of matches where the expected goals margin between Los Blancos and its opponents was 0.5 or less. Below are the 11 fixtures in which the expected goals margin was this tight. The green represents Madrid’s actual goal differential in these matches, while the red represents its expected goal differential.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\n\nrm_laliga_logs <- read_csv(\"madrid_laliga_logs.csv\")\n\nrm_laliga_logs2 <-  rm_laliga_logs %>% \ngroup_by(Opponent) %>%\n  mutate(xG_Diff = xG - xGA) %>%\n  mutate(GD = GF -GA)\n\nclose_fixtures <- rm_laliga_logs2 %>%\n  filter(abs(xG_Diff) < 0.5)\n\nggplot() + \n  geom_dumbbell(\n    data=close_fixtures, \n    aes(y=Opponent, x=GD, xend=xG_Diff),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\") +\n  geom_vline(xintercept=0, color=\"black\") +\nlabs(\n  x=\"Goal Differential\",\n  y=\"Opponent\",\n  title=\"La Liga Champions Outperform Expected Goal Difference in Tight Fixtures\", \n  subtitle=\"Barcelona, Atlético Madrid, Athletic Bilbao, and Levante all fall to league defeats against Real Madrid \ndespite slightly outmatching Los Blancos in this statistic. Only Getafe and Osasuna manage to snatch \npoints off the Kings of Spain in these close affairs.\",\n  caption=\"Source: FBref | by Jacob Spooner\"\n     ) +\n  theme_minimal () +\n  theme (\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nIn 9 out of the 11 fixtures with tight expected goal margins, Real Madrid managed to outperform its expected goal differential. Hence, this metric suggests that the club was not as domestically dominant as the final La Liga table indicates (Los Blancos finished 13 points ahead of 2nd place Barcelona).\nWhat about the Champions League? How did Real Madrid’s expected goals stack up against its opponents during the knockout rounds of this competition?\n\n\nCode\nlibrary(waffle)\n\nrm <- c(\"vs PSG\"=2, \"vs Chelsea\"=2.7, \"vs Manchester City\"=4.2, \"vs Liverpool\"=0.9, 3.4)\nvsrm <- c(\"PSG\"=3.5, \"Chelsea\"=3, \"Manchester City\"=4.3, \"Liverpool\"=2.4)\n\niron(\n waffle(\n   rm*25, \n   rows = 10, \n   xlab=\"Real Madrid's Expected Goals\",\n   colors = c(\"#00529F\", \"#EE324E\", \"#FEBE10\", \"black\", \"white\")) + \n   labs(\n     title=\"Madrid Survive and Advance in Spite of Fewer Expected Goals\", \n     subtitle=\"Chelsea and Manchester City edge Los Blancos in this metric during the UCL Quarter and \nSemi-Finals, while PSG and Liverpool display dominance in the Round of 16 and Final.\") + \n   theme(\n    plot.title = element_text(size = 15, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.title.y = element_blank(),\n    plot.title.position = \"plot\"\n  ),\n waffle(\n   vsrm*25, \n   rows = 10, \n   xlab=\"Expected Goals vs Real Madrid\\n1 square = 0.04 Expected Goals\", \n   colors = c(\"#ceab5d\", \"#034694\", \"#6CABDD\", \"#c8102E\")) + \n   labs(caption=\"Source: FBref | by Jacob Spooner\")\n) \n\n\n\n\n\nThe waffle chart really says it all. Real Madrid got smoked in terms of expected goals on its run to UCL glory. Somewhat ironically, the ties where Los Blancos was not absolutely demolished (vs Chelsea and Manchester City) were the two that required extra time for Madrid to progress (the ties vs PSG and Liverpool were settled in normal time).\nDespite this, it is worth keeping in mind that data can be skewed in a few games of a knockout competition. Maybe a comparison of domestic league performance between these European heavyweights would tell a different story. How do Chelsea, Manchester City and Liverpool’s expected goals for and against in the Premier League, and PSG’s in Ligue 1, compare to that of Real Madrid in La Liga?\n\n\nCode\nlibrary(worldfootballR)\nlibrary(tidyverse)\nlibrary(ggrepel)\n\nleagues <- fb_big5_advanced_season_stats(2022,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3\n)\n\nleagues_wide <- leagues %>%\n  select(Squad, Team_or_Opponent, xG_Expected) %>%\n  pivot_wider(names_from = Team_or_Opponent, values_from = xG_Expected)\n\nrm <- leagues_wide %>% filter(Squad == \"Real Madrid\")\nvsrm_ucl <- leagues_wide %>% filter(Squad == \"Paris S-G\" | Squad == \"Chelsea\" | Squad == \"Manchester City\" | Squad == \"Liverpool\")\n\naverages <- leagues_wide %>% ungroup() %>% summarise(Avg_xG = mean(team), Avg_xG_Against = mean(opponent))\n\nggplot() + \n  geom_point(data=leagues_wide, aes(x=team, y=opponent), color=\"light grey\") +\n  geom_point(data=rm, aes(x=team, y=opponent, label=Squad), color=\"black\") +\n  geom_point(data=vsrm_ucl, aes(x=team, y=opponent), color=\"red\") +\n  geom_hline(yintercept=54.8, color=\"dark grey\") + \n  geom_vline(xintercept=54.8, color=\"dark grey\") +\n  geom_text(aes(x=70, y=30, label=\"Quality Attack, Quality Defense\"), color=\"blue\") +\n  geom_text(aes(x=43, y=63, label=\"Poor Defense, Poor Attack\"), color=\"blue\") +\n  geom_text_repel(data=rm, aes(x=team, y=opponent, label=Squad)) +\n  geom_text_repel(data=vsrm_ucl, aes(x=team, y=opponent, label=Squad)) +\nlabs(\n  x=\"Expected Goals For\",\n  y=\"Expected Goals Against\",\n  title=\"Los Blancos Lack Domestic Expected Goal Dominance of UCL Opponents\", \n  subtitle=\"Manchester City, Liverpool, PSG and Chelsea all concede fewer high quality goal scoring opporunities \nthan Real Madrid in league play. In fact, with the expection of the Blues, they all create more as well.\",\n  caption=\"Source: FBref | by Jacob Spooner\"\n     ) +\n  theme_minimal() + \n  theme (\nplot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nOnce again, Real Madrid falls short of these other clubs. While Los Blancos may have taken home the most prestigious prize in world football, arguably the hottest topic in football analytics implies that this team was not Europe’s finest.\nIt could be that the brilliance of Karim Benzema at one end (he scored a career best 44 goals in 46 matches), and Thibaut Courtois (who was voted man of the match in the UCL Final and registered 16 clean sheets in La Liga) at the other, serve as an explanation for the over performance pertaining to expected goals for and against.\nAt the end of the day though, it is difficult to dismiss the potential role of luck in a few one off Champions League ties. After all, football (soccer) is a fluid game where goals are hard to come by, and are often the result of countless factors culminating at the right moment.\nWill the luck dry up this season? Expected goals data seems to indicate so."
  },
  {
    "objectID": "posts/wolves-recent-defensive-struggles/index.html",
    "href": "posts/wolves-recent-defensive-struggles/index.html",
    "title": "From Formidable to Floundering: The Decline and Possible Resurrection of Wolverhampton Wanderers’ Defense",
    "section": "",
    "text": "Following a rather average and disappointing first season under such ownership, Wolverhampton turned a corner in year two. The club finished top of the English Championship League (2nd division) and achieved promotion to the Premier League. Once there, Wolves took the league by storm. Successive seventh place finishes in 2018-19 and 2019-20 firmly established Wolves as a force to be reckoned with in the top flight. Unfortunately, that summer of 2020 would be as good as it got.\nPlagued by numerous injuries and inadequately replacing a couple of key players who moved on to bigger clubs, Wolves limped to a 13th place finish in 2020-21. A change in management followed, and although Wolves managed a 10th place finish last season, the lack of form during the season’s concluding months was among the worst in the league.\nFast forward to the present day, and Wolverhampton Wanderers finds itself propping up the table 15 matches into the current campaign. The lack of options up top is quite astounding, and this team is allergic to scoring goals. This problem is not new, however, as even those sides that finished seventh struggled to score (although not nearly to the same extent as the team this season).\nUndoubtedly, shyness in front of goal is a problem that is crippling this team. But what about this side’s performance in terms of conceding goals? At its peak under Fosun’s ownership, Wolverhampton was a tough team to break down. Sadly, that defensive solidity seems to have vanished, which, in tandem with the goal scoring issues, has put this club in a far from ideal state. How does Wolves current team compare defensively to those of the past five seasons? And what can we expect from a defensive standpoint moving forward under the recently appointed Julen Lopetegui?\nOne way of addressing the former of these questions is by examining not only goals against, but also expected goals against (number of goals a team should concede based on a mathematical model that takes various factors into account). Essentially, this allows one to draw conclusions about defensive performance based on the difference between a team’s goals against and expected against. So how do the last five Wolverhampton Wanderers seasons compare in terms of these metrics?\n\n\nCode\nlibrary(worldfootballR)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(ggalt)\nlibrary(ggrepel)\n\nteamdata19 <- fb_big5_advanced_season_stats(2019,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3)\nteamdata20 <- fb_big5_advanced_season_stats(2020,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3)\nteamdata21 <- fb_big5_advanced_season_stats(2021,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3)\nteamdata22 <- fb_big5_advanced_season_stats(2022,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3)\nteamdata23 <- fb_big5_advanced_season_stats(2023,stat_type=\"standard\",team_or_player=\"team\", time_pause = 3)\nteamdata19to23 <- bind_rows(teamdata19, teamdata20, teamdata21, teamdata22, teamdata23)\n\nwolves_opponent_data <- teamdata19to23 %>% \n  filter (Squad == \"Wolves\",\n          Team_or_Opponent == \"opponent\")\n\nwolves_goals_against <- wolves_opponent_data %>% \n  select(Season_End_Year, Gls_Per, xG_Per) %>%\n  mutate(Gls_Per_Minus_xG_Per = Gls_Per - xG_Per)\n\nwolves_goals_against %>% \n  gt() %>% \n  cols_label(\n    Season_End_Year = \"Season End Year\",\n    Gls_Per = \"Goals Conceded\",\n    xG_Per = \"Expected Goals Conceded\",\n    Gls_Per_Minus_xG_Per = \"Difference\"\n  ) %>%\n  tab_header(\n    title = \"Wolverhampton has Lacked Defensive Solitiy in Recent Times\",\n    subtitle = \"Per 90 stats over the last five seasons paint the picture clearly. The amount of goals conceded has increased over the last three seasons with the exception of last, a season in which Wolves vastly outperformed its expected goals against.\"\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_source_note(\n    source_note = md(\"By: Jacob Spooner  |  Source: FBref\")\n  ) %>%\ntab_style(\n    style = list(\n      cell_fill(color = \"#FDB913\"),\n      cell_text(color = \"white\")\n      ),\n    locations = cells_body(\n       rows = Season_End_Year == \"2022\")\n  )\n\n\n\n\n\n\n  \n    \n      Wolverhampton has Lacked Defensive Solitiy in Recent Times\n    \n    \n      Per 90 stats over the last five seasons paint the picture clearly. The amount of goals conceded has increased over the last three seasons with the exception of last, a season in which Wolves vastly outperformed its expected goals against.\n    \n  \n  \n    \n      Season End Year\n      Goals Conceded\n      Expected Goals Conceded\n      Difference\n    \n  \n  \n    2019\n1.11\n1.11\n0.00\n    2020\n1.03\n1.00\n0.03\n    2021\n1.29\n1.30\n-0.01\n    2022\n1.11\n1.68\n-0.57\n    2023\n1.53\n1.31\n0.22\n  \n  \n    \n      By: Jacob Spooner  |  Source: FBref\n    \n  \n  \n\n\n\n\nLast season in particular is interesting as it indicates that Wolves defense was at its worse despite conceding fewer goals per match than the season prior and even the current one. Was Wolverhampton just lucky? A closer look at how the club compared to its Premier League counterparts provides greater perspective.\n\n\nCode\npl_squads_22 <- teamdata22 %>%\n  filter(Comp == \"Premier League\",\n         Team_or_Opponent == \"opponent\")\n\nggplot() + \n  geom_dumbbell(\n    data=pl_squads_22, \n    aes(y=Squad, x=Gls_Per, xend=xG_Per),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"blue\",\n    colour_xend = \"orange\") +\nlabs(\n  x=\"Blue = Goals Against Per Match, Orange = Expected Goals Against Per Match\",\n  y=\"\",\n  title=\"Wolves Defense was Lower Midtable Quality Last Season\", \n     subtitle=\"Although Wolverhampton ranked fifth in terms of fewest goals conceded, expected goals against\nsuggest the club should have conceded more goals than the likes of Newcastle and Southampton.\",\n  caption=\"Source: FBref | by Jacob Spooner\"\n     ) +\n  theme_minimal () +\n  theme (\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nWolverhampton Wanderers clearly had the largest discrepancy between goals against and expected goals against among all Premier League clubs. It is worth noting that José Sá was statistically one of the best goalkeepers in Europe last season, which in part may help explain for this discrepancy. However, it would take a brave man to conclude that this major difference is solely down to the brilliance of a goalkeeper.\nWhile last season saw this massive overperformance in terms of conceding goals, the table shown earlier indicates that the story has been completely different this season. Wolves are clearly underperforming in this statistic, but how does its performance compare with the rest of the league?\n\n\nCode\npl_squads_23 <- teamdata23 %>%\n  filter(Comp == \"Premier League\",\n         Team_or_Opponent == \"opponent\")\n\nggplot() + \n  geom_dumbbell(\n    data=pl_squads_23, \n    aes(y=Squad, x=Gls_Per, xend=xG_Per),\n    size = 2,\n    colour = \"grey\",\n    colour_x = \"blue\",\n    colour_xend = \"orange\") +\nlabs(\n  x=\"Blue = Goals Against Per Match, Orange = Expected Goals Against Per Match\",\n  y=\"\",\n  title=\"Wolverhampton is Still Mediocre at the Back (But the Luck has Dried Up)\", \n     subtitle=\"In terms of expected goals, Wolves is actually performing better than last season compared to its \nPremier League foes. In spite of this, the club is conceding more goals than expected.\",\n  caption=\"Source: FBref | by Jacob Spooner\"\n     ) +\n  theme_minimal () +\n  theme (\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\"\n  )\n\n\n\n\n\nIt seems that whatever was papering over the cracks last season is no longer able to hide the defensive flaws of this team. In fact, the back five lauded for being defensively sound last season was actually conceding more expected goals relative to its competition than this season’s supposedly less secure back four.\nInterestingly, there were reports earlier in the season that José Sá had been playing with a wrist injury, so maybe this partially explains the current predicament. Once again though, the gulf between this season and last regarding goals against and expected goals against surely comes down to more than a goalkeeper’s wrist.\nAlso intriguing is that, in stark contrast to last season, the majority of clubs are conceding more goals than expected this campaign. It is difficult to pinpoint exactly why this is, but it could be that over a smaller sample size of games, attacking players have been ridiculously clinical. Maybe Wolves have just happened to be on the receiving end of this. However, in the absence of further investigation, this remains rather speculative.\nSwitching gears back to the earlier mentioned supposedly less secure back four, the fact that Wolves have been playing this way is significant in the regard that Julen Lopetegui, the new Wolves manager, utilized a similar formation while managing at Sevilla. Although he was sacked after a poor start to this season, Lopetegui’s three prior seasons at Sevilla prior were highly successful as the club finished fourth in each of those La Liga campaigns. His teams were known to be solid at the back, but to what extent? How did his side stack up defensively in comparison to the top clubs in European football this past season?\n\n\nCode\nopponent_data22 <- teamdata22 %>% \n  filter (Team_or_Opponent == \"opponent\")\n\nopponent_Goals_data22 <- opponent_data22 %>% \n  select(Squad, xG_Per, Gls_Per)\n\nsev <- opponent_Goals_data22 %>% filter(Squad == \"Sevilla\")\nwwfc <- opponent_Goals_data22 %>% filter(Squad == \"Wolves\")\ndefensively_poor <- opponent_Goals_data22 %>% filter(Gls_Per >= 2.1)\nman_city <- opponent_Goals_data22 %>% filter(Squad == \"Manchester City\")\n\naverages22 <- opponent_Goals_data22  %>% ungroup() %>% summarise(Avg_Gls = mean(Gls_Per), Avg_xG = mean(xG_Per))\n\nggplot() + \n  geom_point(data=opponent_Goals_data22, aes(x=xG_Per, y=Gls_Per), color=\"light grey\") +\n  geom_point(data=sev, aes(x=xG_Per, y=Gls_Per, label=Squad), color=\"#f43333\") +\n  geom_point(data=wwfc, aes(x=xG_Per, y=Gls_Per, label=Squad), color=\"#FDB913\") +\n  geom_point(data=defensively_poor, aes(x=xG_Per, y=Gls_Per, label=Squad), color=\"black\") +\n  geom_point(data=man_city, aes(x=xG_Per, y=Gls_Per, label=Squad), color=\"#6CABDD\") +\n  geom_smooth(data=opponent_Goals_data22, aes(x=xG_Per, y=Gls_Per), method=\"lm\") +\n  geom_hline(yintercept=1.3642, color=\"dark grey\") + \n  geom_vline(xintercept=1.4741, color=\"dark grey\") +\n  geom_text(aes(x=1.2, y=0.5, label=\"Defensively Brilliant\"), color=\"red\") +\n  geom_text(aes(x=2.0, y=1.6, label=\"Defensively Poor\"), color=\"red\") +\n  geom_text_repel(data=sev, aes(x=xG_Per, y=Gls_Per, label=Squad)) +\n  geom_text_repel(data=wwfc, aes(x=xG_Per, y=Gls_Per, label=Squad)) +\n  geom_text_repel(data=defensively_poor, aes(x=xG_Per, y=Gls_Per, label=Squad)) +\n  geom_text_repel(data=man_city, aes(x=xG_Per, y=Gls_Per, label=Squad)) +\n  labs(\n  x=\"Expected Goals Against Per Match\",\n  y=\"Goals Against Per Match\",\n  title=\"Julen Lopetegui's Sevilla Among Europe's Elite Defenses Last Season\", \n     subtitle=\"With respect to both goals against and expected goals against, Los Nervionenses ranked below only \na handful of teams from big 5 leagues. However, the club may have been lucky not to concede more.\",\n  caption=\"Source: FBref | by Jacob Spooner\"\n     ) +\n  theme_minimal() + \n  theme (\nplot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 10),\n    axis.text = element_text(size = 7),\n    axis.ticks = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    plot.title.position = \"plot\"\n)                  \n\n\n\n\n\nClearly Lopetegui’s Sevilla was an extremely solid defensive unit. While it is true that Los Nervionenses outperformed its expected goals against, the club still had one of the best defenses in that regard.\nWill Lopetegui bring similar stability to Wolverhampton Wanderers? Undoubtedly the transition from one of Spain’s bigger clubs to a team at the foot of the Premier League will be far from easy. However, he is an experienced manager who has been consistently implemented a formation similar to the one Wolves have been using all season.\nThe days of five at the back may be no more, but Julen Lopetegui’s side should be a tough nut to crack. Will this be the reality though? This past season of Sevilla’s seems to indicate so."
  }
]